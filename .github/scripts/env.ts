import * as fs from 'fs-extra'
import * as path from 'path'

const isCI = process.env.CI === 'true'
if (isCI) {
  console.log('🏃 CI detected, skipping .env.local generation')
  process.exit(0)
}

console.log('🔥 Generating .env.local files')

const autogeneratedComment =
  '# This file is autogenerated. To make changes, modify the root level .env.local file and run bun install\n\n'
const outputName = '.env.local'

// Read the .env file
const envFilePath = path.join(__dirname, '..', '..', outputName)
if (!fs.existsSync(envFilePath)) {
  console.log('🛑 .env.local file does not exist')
  process.exit(0)
}
const envFileContent = fs.readFileSync(envFilePath, 'utf8')

/**
 * Generate Expo .env file content
 */
const expoOutputPath = path.join(__dirname, '..', '..', 'apps', 'expo', outputName)
const expoFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('PUBLIC_')) {
      return line.replace(/^PUBLIC_/, 'EXPO_PUBLIC_')
    }
  })
  .join('\n')
const expoNoTelemetry = 'EXPO_NO_TELEMETRY=true'
fs.writeFileSync(expoOutputPath, `${autogeneratedComment}\n${expoFileContent}\n${expoNoTelemetry}`)

/**
 * Generate Next.js .env file content
 */
console.log(`📁 Starting Next.js env file generation process`)
const nextOutputPath = path.join(__dirname, '..', '..', 'apps', 'next', outputName)
console.log(`📍 Next.js output path: ${nextOutputPath}`)
console.log(`🔍 Preparing Next.js env file...`)
console.log(`📄 Original env file content length: ${envFileContent.length} characters`)

let convertedCount = 0
const nextFileContent = envFileContent
  .split('\n')
  .map((line) => {
    console.log(`🔎 Processing line: ${line.substring(0, 20)}${line.length > 20 ? '...' : ''}`)
    if (line.startsWith('PUBLIC_')) {
      const varName = line.split('=')[0]
      console.log(`🔄 Converting ${varName} to NEXT_PUBLIC_...`)
      convertedCount++
      return line.replace(/^PUBLIC_/, 'NEXT_PUBLIC_')
    }
    console.log(`⏩ Keeping line as is`)
    return line
  })
  .join('\n')

console.log(`📊 Converted ${convertedCount} PUBLIC_ variables to NEXT_PUBLIC_`)
console.log(`📄 Final Next.js env content length: ${nextFileContent.length} characters`)
console.log('🔍 Inspecting next environment file content by lines:')
console.log(nextFileContent.split('\n'))
console.log(`💾 Writing Next.js env file to: ${nextOutputPath}`)
fs.writeFileSync(nextOutputPath, `${autogeneratedComment}\n${nextFileContent}`)
console.log(`✅ Generated Next.js env file at ${nextOutputPath}`)
console.log(`🏁 Next.js env file generation complete`)

/**
 * Generate Cloudflare Wrangler .dev.vars file content
 */
console.log(`📁 Starting Cloudflare Wrangler env file generation process`)
const wranglerOutputPath = path.join(__dirname, '..', '..', 'packages', 'api', '.dev.vars')
console.log(`📍 Wrangler output path: ${wranglerOutputPath}`)
console.log(`🔍 Preparing Wrangler env file...`)
// Remove public variables from output

// Log the env file content split by lines for debugging purposes
console.log('🔍 Inspecting environment file content by lines:')
console.log(envFileContent.split('\n'))

let wranglerConvertedCount = 0
const wranglerFileContent = envFileContent
  .split('\n')
  .map((line) => {
    console.log(`🔎 Processing Wrangler line: ${line}`)

    // Check for both PUBLIC_ and NEXT_PUBLIC_ prefixes for APP_URL
    if (line.startsWith('PUBLIC_APP_URL') || line.startsWith('NEXT_PUBLIC_APP_URL')) {
      console.log(`🔄 Converting to APP_URL`)
      wranglerConvertedCount++
      return line.replace(/^(PUBLIC_|NEXT_PUBLIC_)APP_URL/, 'APP_URL')
    }
    // Keep non-public vars and comments
    if (!line.startsWith('PUBLIC_') && !line.startsWith('NEXT_PUBLIC_')) {
      console.log(`⏩ Keeping line for Wrangler: ${line.substring(0, 20)}${line.length > 20 ? '...' : ''}`)
      return line
    }
    console.log(`🚫 Removing public variable: ${line.substring(0, 20)}${line.length > 20 ? '...' : ''}`)
    return undefined
  })
  .filter(Boolean)
  .join('\n')

console.log(`📊 Processed ${wranglerConvertedCount} special variables for Wrangler`)
console.log(`📄 Final Wrangler env content length: ${wranglerFileContent.length} characters`)
const noD1Warning = 'NO_D1_WARNING=true'
console.log(`💾 Writing Wrangler env file to: ${wranglerOutputPath}`)
fs.writeFileSync(
  wranglerOutputPath,
  `${autogeneratedComment}\n${wranglerFileContent}\n${noD1Warning}`
)
console.log(`✅ Generated Wrangler env file at ${wranglerOutputPath}`)
console.log(`🏁 Wrangler env file generation complete`)
